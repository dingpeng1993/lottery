[2019-03-05 17:50:28] INFO  TomcatWebServer.initialize #  - Tomcat initialized with port(s): 8084 (http)
[2019-03-05 17:50:30] INFO  ContextLoader.prepareWebApplicationContext #  - Root WebApplicationContext: initialization completed in 4843 ms
[2019-03-05 17:50:31] WARN  AnnotationConfigServletWebServerApplicationContext.refresh #  - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'activityController': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'activityFlow': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'activityService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.dingpeng.java.exercise.lottery.domain.repository.ActivityRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@javax.annotation.Resource(shareable=true, lookup=, name=, description=, authenticationType=CONTAINER, type=class java.lang.Object, mappedName=)}
[2019-03-05 17:50:31] INFO  ConditionEvaluationReportLoggingListener.logMessage #  - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
[2019-03-05 17:50:33] ERROR LoggingFailureAnalysisReporter.report #  - 

***************************
APPLICATION FAILED TO START
***************************

Description:

A component required a bean of type 'com.dingpeng.java.exercise.lottery.domain.repository.ActivityRepository' that could not be found.


Action:

Consider defining a bean of type 'com.dingpeng.java.exercise.lottery.domain.repository.ActivityRepository' in your configuration.

[2019-03-05 17:55:26] INFO  ConfigurationClassPostProcessor.enhanceConfigurationClasses #  - Cannot enhance @Configuration bean definition 'mapperScannerConfig' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
[2019-03-05 17:55:26] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSourceConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.DataSourceConfig$$EnhancerBySpringCGLIB$$5d3c5cc3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-05 17:55:30] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-05 17:55:31] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-05 17:55:31] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-05 17:55:31] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'mybatisConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.MybatisConfig$$EnhancerBySpringCGLIB$$88296ad1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-05 17:55:32] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'transactionManager' of type [org.springframework.jdbc.datasource.DataSourceTransactionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-05 17:55:32] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$662e5627] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-05 17:55:33] INFO  TomcatWebServer.initialize #  - Tomcat initialized with port(s): 8084 (http)
[2019-03-05 17:55:34] INFO  ContextLoader.prepareWebApplicationContext #  - Root WebApplicationContext: initialization completed in 11059 ms
[2019-03-05 17:55:45] INFO  ThreadPoolTaskExecutor.initialize #  - Initializing ExecutorService 'applicationTaskExecutor'
[2019-03-05 17:55:49] INFO  TomcatWebServer.initialize #  - Tomcat initialized with port(s): 9522 (http)
[2019-03-05 17:55:49] INFO  ContextLoader.prepareWebApplicationContext #  - Root WebApplicationContext: initialization completed in 488 ms
[2019-03-05 17:55:49] INFO  EndpointLinksResolver.<init> #  - Exposing 2 endpoint(s) beneath base path '/actuator'
[2019-03-05 17:55:49] INFO  TomcatWebServer.start #  - Tomcat started on port(s): 9522 (http) with context path ''
[2019-03-05 17:55:50] INFO  TomcatWebServer.start #  - Tomcat started on port(s): 8084 (http) with context path ''
[2019-03-05 17:55:51] INFO  DispatcherServlet.initServletBean #  - Initializing Servlet 'dispatcherServlet'
[2019-03-05 17:55:51] INFO  DispatcherServlet.initServletBean #  - Completed initialization in 35 ms
