[2019-03-06 15:53:09] INFO  ConfigurationClassPostProcessor.enhanceConfigurationClasses #  - Cannot enhance @Configuration bean definition 'mapperScannerConfig' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
[2019-03-06 15:53:09] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSourceConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.DataSourceConfig$$EnhancerBySpringCGLIB$$ee8e76de] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:10] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:10] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:10] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:10] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'mybatisConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.MybatisConfig$$EnhancerBySpringCGLIB$$197b84ec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:10] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'transactionManager' of type [org.springframework.jdbc.datasource.DataSourceTransactionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:10] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f7807042] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:16] INFO  ThreadPoolTaskExecutor.initialize #  - Initializing ExecutorService 'applicationTaskExecutor'
[2019-03-06 15:53:20] WARN  ManagementContextAutoConfiguration.afterSingletonsInstantiated #  - Could not start embedded management container on different port (management endpoints are still available through JMX)
[2019-03-06 15:53:22] INFO  SpringBootMockServletContext.log #  - Initializing Spring TestDispatcherServlet ''
[2019-03-06 15:53:22] INFO  TestDispatcherServlet.initServletBean #  - Initializing Servlet ''
[2019-03-06 15:53:22] INFO  TestDispatcherServlet.initServletBean #  - Completed initialization in 167 ms
[2019-03-06 15:53:33] INFO  ThreadPoolTaskExecutor.shutdown #  - Shutting down ExecutorService 'applicationTaskExecutor'
[2019-03-06 15:53:50] INFO  ConfigurationClassPostProcessor.enhanceConfigurationClasses #  - Cannot enhance @Configuration bean definition 'mapperScannerConfig' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
[2019-03-06 15:53:51] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSourceConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.DataSourceConfig$$EnhancerBySpringCGLIB$$943f762a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:52] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:52] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:52] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:52] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'mybatisConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.MybatisConfig$$EnhancerBySpringCGLIB$$bf2c8438] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:52] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'transactionManager' of type [org.springframework.jdbc.datasource.DataSourceTransactionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:52] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$9d316f8e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 15:53:58] INFO  ThreadPoolTaskExecutor.initialize #  - Initializing ExecutorService 'applicationTaskExecutor'
[2019-03-06 15:54:01] WARN  ManagementContextAutoConfiguration.afterSingletonsInstantiated #  - Could not start embedded management container on different port (management endpoints are still available through JMX)
[2019-03-06 15:54:03] INFO  SpringBootMockServletContext.log #  - Initializing Spring TestDispatcherServlet ''
[2019-03-06 15:54:03] INFO  TestDispatcherServlet.initServletBean #  - Initializing Servlet ''
[2019-03-06 15:54:03] INFO  TestDispatcherServlet.initServletBean #  - Completed initialization in 26 ms
[2019-03-06 15:55:59] INFO  ThreadPoolTaskExecutor.shutdown #  - Shutting down ExecutorService 'applicationTaskExecutor'
[2019-03-06 16:22:48] INFO  ConfigurationClassPostProcessor.enhanceConfigurationClasses #  - Cannot enhance @Configuration bean definition 'mapperScannerConfig' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
[2019-03-06 16:22:49] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSourceConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.DataSourceConfig$$EnhancerBySpringCGLIB$$629bb687] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:22:49] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:22:49] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:22:49] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:22:49] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'mybatisConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.MybatisConfig$$EnhancerBySpringCGLIB$$8d88c495] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:22:49] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'transactionManager' of type [org.springframework.jdbc.datasource.DataSourceTransactionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:22:49] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6b8dafeb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:22:56] INFO  ThreadPoolTaskExecutor.initialize #  - Initializing ExecutorService 'applicationTaskExecutor'
[2019-03-06 16:23:00] WARN  ManagementContextAutoConfiguration.afterSingletonsInstantiated #  - Could not start embedded management container on different port (management endpoints are still available through JMX)
[2019-03-06 16:23:01] INFO  TransactionContext.startTransaction #  - Began transaction (1) for test context [DefaultTestContext@4e858e0a testClass = LotteryControllerTest, testInstance = com.dingpeng.java.exercise.lottery.api.web.controller.LotteryControllerTest@4fc71437, testMethod = draw@LotteryControllerTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@435fb7b5 testClass = LotteryControllerTest, locations = '{}', classes = '{class com.dingpeng.java.exercise.lottery.ApplicationStarter}', contextInitializerClasses = '[]', activeProfiles = '{dev}', propertySourceLocations = '{}', propertySourceProperties = '{ApplicationStarter.class, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@72d6b3ba, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@35a3d49f, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@478db956, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@74f6c5d8], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@75c15f76]; rollback [true]
[2019-03-06 16:23:01] INFO  SpringBootMockServletContext.log #  - Initializing Spring TestDispatcherServlet ''
[2019-03-06 16:23:01] INFO  TestDispatcherServlet.initServletBean #  - Initializing Servlet ''
[2019-03-06 16:23:01] INFO  TestDispatcherServlet.initServletBean #  - Completed initialization in 51 ms
[2019-03-06 16:23:02] INFO  TransactionContext.endTransaction #  - Rolled back transaction for test: [DefaultTestContext@4e858e0a testClass = LotteryControllerTest, testInstance = com.dingpeng.java.exercise.lottery.api.web.controller.LotteryControllerTest@4fc71437, testMethod = draw@LotteryControllerTest, testException = java.lang.IllegalArgumentException: 'values' must not be empty, mergedContextConfiguration = [WebMergedContextConfiguration@435fb7b5 testClass = LotteryControllerTest, locations = '{}', classes = '{class com.dingpeng.java.exercise.lottery.ApplicationStarter}', contextInitializerClasses = '[]', activeProfiles = '{dev}', propertySourceLocations = '{}', propertySourceProperties = '{ApplicationStarter.class, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@72d6b3ba, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@35a3d49f, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@478db956, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@74f6c5d8], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
[2019-03-06 16:23:02] INFO  ThreadPoolTaskExecutor.shutdown #  - Shutting down ExecutorService 'applicationTaskExecutor'
[2019-03-06 16:24:59] INFO  ConfigurationClassPostProcessor.enhanceConfigurationClasses #  - Cannot enhance @Configuration bean definition 'mapperScannerConfig' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
[2019-03-06 16:25:01] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSourceConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.DataSourceConfig$$EnhancerBySpringCGLIB$$ade973be] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:25:01] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:25:02] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:25:02] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:25:02] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'mybatisConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.MybatisConfig$$EnhancerBySpringCGLIB$$d8d681cc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:25:02] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'transactionManager' of type [org.springframework.jdbc.datasource.DataSourceTransactionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:25:02] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b6db6d22] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:25:07] INFO  ThreadPoolTaskExecutor.initialize #  - Initializing ExecutorService 'applicationTaskExecutor'
[2019-03-06 16:25:10] WARN  ManagementContextAutoConfiguration.afterSingletonsInstantiated #  - Could not start embedded management container on different port (management endpoints are still available through JMX)
[2019-03-06 16:25:11] INFO  TransactionContext.startTransaction #  - Began transaction (1) for test context [DefaultTestContext@2101b44a testClass = LotteryControllerTest, testInstance = com.dingpeng.java.exercise.lottery.api.web.controller.LotteryControllerTest@446a692f, testMethod = draw@LotteryControllerTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@2cc3ad05 testClass = LotteryControllerTest, locations = '{}', classes = '{class com.dingpeng.java.exercise.lottery.ApplicationStarter}', contextInitializerClasses = '[]', activeProfiles = '{dev}', propertySourceLocations = '{}', propertySourceProperties = '{ApplicationStarter.class, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@72d6b3ba, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@35a3d49f, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@478db956, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@74f6c5d8], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@283ecb4b]; rollback [true]
[2019-03-06 16:25:12] INFO  SpringBootMockServletContext.log #  - Initializing Spring TestDispatcherServlet ''
[2019-03-06 16:25:12] INFO  TestDispatcherServlet.initServletBean #  - Initializing Servlet ''
[2019-03-06 16:25:12] INFO  TestDispatcherServlet.initServletBean #  - Completed initialization in 76 ms
[2019-03-06 16:25:40] INFO  TransactionContext.endTransaction #  - Rolled back transaction for test: [DefaultTestContext@2101b44a testClass = LotteryControllerTest, testInstance = com.dingpeng.java.exercise.lottery.api.web.controller.LotteryControllerTest@446a692f, testMethod = draw@LotteryControllerTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@2cc3ad05 testClass = LotteryControllerTest, locations = '{}', classes = '{class com.dingpeng.java.exercise.lottery.ApplicationStarter}', contextInitializerClasses = '[]', activeProfiles = '{dev}', propertySourceLocations = '{}', propertySourceProperties = '{ApplicationStarter.class, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@72d6b3ba, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@35a3d49f, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@478db956, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@74f6c5d8], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
[2019-03-06 16:25:40] INFO  ThreadPoolTaskExecutor.shutdown #  - Shutting down ExecutorService 'applicationTaskExecutor'
[2019-03-06 16:31:56] INFO  ConfigurationClassPostProcessor.enhanceConfigurationClasses #  - Cannot enhance @Configuration bean definition 'mapperScannerConfig' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
[2019-03-06 16:31:58] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSourceConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.DataSourceConfig$$EnhancerBySpringCGLIB$$c56ffe65] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:31:58] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:31:58] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:31:58] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:31:58] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'mybatisConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.MybatisConfig$$EnhancerBySpringCGLIB$$f05d0c73] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:31:58] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'transactionManager' of type [org.springframework.jdbc.datasource.DataSourceTransactionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:31:58] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ce61f7c9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:32:04] INFO  ThreadPoolTaskExecutor.initialize #  - Initializing ExecutorService 'applicationTaskExecutor'
[2019-03-06 16:32:07] WARN  ManagementContextAutoConfiguration.afterSingletonsInstantiated #  - Could not start embedded management container on different port (management endpoints are still available through JMX)
[2019-03-06 16:32:08] INFO  ThreadPoolTaskExecutor.shutdown #  - Shutting down ExecutorService 'applicationTaskExecutor'
[2019-03-06 16:33:22] INFO  ConfigurationClassPostProcessor.enhanceConfigurationClasses #  - Cannot enhance @Configuration bean definition 'mapperScannerConfig' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
[2019-03-06 16:33:23] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSourceConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.DataSourceConfig$$EnhancerBySpringCGLIB$$a2859733] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:33:24] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:33:24] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:33:24] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:33:24] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'mybatisConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.MybatisConfig$$EnhancerBySpringCGLIB$$cd72a541] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:33:24] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'transactionManager' of type [org.springframework.jdbc.datasource.DataSourceTransactionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:33:24] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ab779097] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:33:29] INFO  ThreadPoolTaskExecutor.initialize #  - Initializing ExecutorService 'applicationTaskExecutor'
[2019-03-06 16:33:33] WARN  ManagementContextAutoConfiguration.afterSingletonsInstantiated #  - Could not start embedded management container on different port (management endpoints are still available through JMX)
[2019-03-06 16:33:34] INFO  TransactionContext.startTransaction #  - Began transaction (1) for test context [DefaultTestContext@2101b44a testClass = LotteryControllerTest, testInstance = com.dingpeng.java.exercise.lottery.api.web.controller.LotteryControllerTest@4153a832, testMethod = draw@LotteryControllerTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@2cc3ad05 testClass = LotteryControllerTest, locations = '{}', classes = '{class com.dingpeng.java.exercise.lottery.ApplicationStarter}', contextInitializerClasses = '[]', activeProfiles = '{dev}', propertySourceLocations = '{}', propertySourceProperties = '{ApplicationStarter.class, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@72d6b3ba, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@35a3d49f, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@478db956, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@74f6c5d8], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@4a2dbcfc]; rollback [true]
[2019-03-06 16:33:35] INFO  SpringBootMockServletContext.log #  - Initializing Spring TestDispatcherServlet ''
[2019-03-06 16:33:35] INFO  TestDispatcherServlet.initServletBean #  - Initializing Servlet ''
[2019-03-06 16:33:35] INFO  TestDispatcherServlet.initServletBean #  - Completed initialization in 43 ms
[2019-03-06 16:33:43] INFO  TransactionContext.endTransaction #  - Rolled back transaction for test: [DefaultTestContext@2101b44a testClass = LotteryControllerTest, testInstance = com.dingpeng.java.exercise.lottery.api.web.controller.LotteryControllerTest@4153a832, testMethod = draw@LotteryControllerTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@2cc3ad05 testClass = LotteryControllerTest, locations = '{}', classes = '{class com.dingpeng.java.exercise.lottery.ApplicationStarter}', contextInitializerClasses = '[]', activeProfiles = '{dev}', propertySourceLocations = '{}', propertySourceProperties = '{ApplicationStarter.class, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@72d6b3ba, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@35a3d49f, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@478db956, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@74f6c5d8], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
[2019-03-06 16:33:43] INFO  ThreadPoolTaskExecutor.shutdown #  - Shutting down ExecutorService 'applicationTaskExecutor'
[2019-03-06 16:34:54] INFO  ConfigurationClassPostProcessor.enhanceConfigurationClasses #  - Cannot enhance @Configuration bean definition 'mapperScannerConfig' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
[2019-03-06 16:34:54] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSourceConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.DataSourceConfig$$EnhancerBySpringCGLIB$$3126044] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:34:55] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'dataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:34:55] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:34:55] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:34:55] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'mybatisConfig' of type [com.dingpeng.java.exercise.lottery.resource.config.MybatisConfig$$EnhancerBySpringCGLIB$$2dff6e52] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:34:55] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'transactionManager' of type [org.springframework.jdbc.datasource.DataSourceTransactionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:34:55] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization #  - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c0459a8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[2019-03-06 16:35:01] INFO  ThreadPoolTaskExecutor.initialize #  - Initializing ExecutorService 'applicationTaskExecutor'
[2019-03-06 16:35:04] WARN  ManagementContextAutoConfiguration.afterSingletonsInstantiated #  - Could not start embedded management container on different port (management endpoints are still available through JMX)
[2019-03-06 16:35:05] INFO  TransactionContext.startTransaction #  - Began transaction (1) for test context [DefaultTestContext@2101b44a testClass = LotteryControllerTest, testInstance = com.dingpeng.java.exercise.lottery.api.web.controller.LotteryControllerTest@40fcaae7, testMethod = draw@LotteryControllerTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@2cc3ad05 testClass = LotteryControllerTest, locations = '{}', classes = '{class com.dingpeng.java.exercise.lottery.ApplicationStarter}', contextInitializerClasses = '[]', activeProfiles = '{dev}', propertySourceLocations = '{}', propertySourceProperties = '{ApplicationStarter.class, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@72d6b3ba, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@35a3d49f, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@478db956, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@74f6c5d8], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@7fa85a55]; rollback [true]
[2019-03-06 16:35:06] INFO  SpringBootMockServletContext.log #  - Initializing Spring TestDispatcherServlet ''
[2019-03-06 16:35:06] INFO  TestDispatcherServlet.initServletBean #  - Initializing Servlet ''
[2019-03-06 16:35:06] INFO  TestDispatcherServlet.initServletBean #  - Completed initialization in 69 ms
[2019-03-06 16:35:08] INFO  TransactionContext.endTransaction #  - Rolled back transaction for test: [DefaultTestContext@2101b44a testClass = LotteryControllerTest, testInstance = com.dingpeng.java.exercise.lottery.api.web.controller.LotteryControllerTest@40fcaae7, testMethod = draw@LotteryControllerTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@2cc3ad05 testClass = LotteryControllerTest, locations = '{}', classes = '{class com.dingpeng.java.exercise.lottery.ApplicationStarter}', contextInitializerClasses = '[]', activeProfiles = '{dev}', propertySourceLocations = '{}', propertySourceProperties = '{ApplicationStarter.class, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@72d6b3ba, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@35a3d49f, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@478db956, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@74f6c5d8], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.populatedRequestContextHolder' -> true, 'org.springframework.test.context.web.ServletTestExecutionListener.resetRequestContextHolder' -> true]]
[2019-03-06 16:35:08] INFO  ThreadPoolTaskExecutor.shutdown #  - Shutting down ExecutorService 'applicationTaskExecutor'
